{"version":3,"sources":["assets/machine-learning.svg","constants/SiteConfig.ts","assets/icon.ts","components/Navigation.tsx","components/Footer.tsx","layout/Layout.tsx","pages/Home.tsx","pages/About.tsx","containers/App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","config","siteTitle","siteTitleShort","siteTitleAlt","email","apiUrl","siteLogo","siteUrl","pathPrefix","dateFromFormat","dateFormat","googleAnalyticsID","siteDescription","menuLinks","name","link","ML","ml","Navigation","className","style","background","role","aria-label","to","src","width","height","alt","map","index","key","fontSize","Footer","padding","Date","getFullYear","href","Layout","children","title","Home","React","useState","lat","lng","date","getDate","undefined","time","getTime","starmap_link","stateProps","setStateProps","makeAPIRequest","query_string","a","resource_url","api_endpoint","SiteConfig","fetch","server_response","json","data","console","log","generated_starmap_link","type","placeholder","onChange","e","parseFloat","target","value","defaultValue","valueAsDate","parseInt","marginTop","onClick","formatted_date","getFormattedDate","formatted_time","getFormattedTime","hanleClickGenerateStarmap","d","currDate","currMonth","getMonth","hours","getHours","mins","getMinutes","splitted_date","split","replace","About","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a903c5c0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/machine-learning.f07e5eab.svg\";","const config: Config = {\n\tsiteTitle: 'Starmap SVG Generator',\n\tsiteTitleShort: 'Starmap Generator',\n\tsiteTitleAlt: '',\n\temail: '',\n\tapiUrl: 'https://3.15.194.121/api/starmap',\n\tsiteLogo: '',\n\tsiteUrl: '',\n\tpathPrefix: '',\n\tdateFromFormat: '',\n\tdateFormat: '',\n\tgoogleAnalyticsID: '',\n\tsiteDescription: '',\n\tmenuLinks: [\n\t\t{\n\t\t\tname: 'Home',\n\t\t\tlink: '/',\n\t\t},\n\t\t{\n\t\t\tname: 'About',\n\t\t\tlink: '/about/',\n\t\t}\n\t]\n}\n\nexport default config\n","import ml from './machine-learning.svg'\n\nexport const ML = ml","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport { ML } from './../assets/icon'\n\ntype PropsType = {\n\tmenuLinks: MenuLink[]\n}\n\nconst Navigation: React.FC<PropsType> = ({ menuLinks }) => {\n\treturn (\n\t\t<div className=\"hero-head\" style={{ background: \"#00d1b2\" }}>\n\t\t\t<div className=\"container\">\n\t\t\t\t<nav className=\"navbar is-primary\" role=\"navigation\" aria-label=\"main navigation\">\n\t\t\t\t\t<div className=\"navbar-brand\">\n\t\t\t\t\t\t<Link className=\"navbar-item narvbar-icon\" to=\"/\">\n\t\t\t\t\t\t\t<img src={ML} width=\"48\" height=\"75\" alt=\"logo\" />\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmenuLinks.map((link, index) => <Link key={index}\n\t\t\t\t\t\t\t\tstyle={{ fontSize: index === 0 ? '1.25rem' : '1rem' }}\n\t\t\t\t\t\t\t\tclassName={`navbar-item has-text-white is-hovered has-text-weight-semibold`}\n\t\t\t\t\t\t\t\tto={link.link}>{link.name}</Link>)\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t</nav>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Navigation","import React from 'react'\n\nconst Footer = () => {\n\treturn (\n\t\t<footer className=\"footer has-background-black\" style={{ padding: \"2.5rem 0.75rem\" }}>\n\t\t\t<div className=\"content has-text-centered\">\n\t\t\t\t<div className=\"columns\">\n\t\t\t\t\t<div className=\"column is-11 is-offset-1 has-text-left has-text-white\">\n\t\t\t\t\t\t<p>Â© {new Date().getFullYear()} <a href=\"#!\">Starmap Generator</a></p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</footer>\n\t)\n}\n\nexport default Footer","import React from 'react'\n\nimport config from 'constants/SiteConfig'\n\nimport Navigation from 'components/Navigation'\nimport Footer from 'components/Footer'\n\ntype PropsType = {\n\tchildren: React.ReactNode\n\ttitle?: string\n}\n\nconst Layout: React.FC<PropsType> = ({ children, title }) => {\n\n\treturn <>\n\t\t<Navigation menuLinks={config.menuLinks} />\n\t\t{children}\n\t\t<Footer />\n\t</>\n}\n\n\nexport default Layout","import React from 'react'\nimport Layout from 'layout/Layout'\nimport SiteConfig from 'constants/SiteConfig'\n\ntype S = {\n\tlat: number\n\tlng: number\n\tdate: string\n\ttime: string\n\theight: number\n\twidth: number\n\tstarmap_link: string\n}\n\nconst Home = () => {\n\n\tconst [stateProps, setStateProps] = React.useState<S>({\n\t\tlat: 0,\n\t\tlng: 0,\n\t\tdate: getDate(undefined),\n\t\ttime: getTime(),\n\t\theight: 0,\n\t\twidth: 0,\n\t\tstarmap_link: 'https://bulma.io/images/placeholders/640x480.png'\n\t})\n\n\tconst handleOnChangeDate = (date: Date | null) => {\n\t\tif (date === null)\n\t\t\treturn \"\"\n\t\treturn getDate(date)\n\t}\n\n\tconst hanleClickGenerateStarmap = () => {\n\n\t\tconsole.log(stateProps);\n\n\n\t\tlet { lat, lng, date, time, height, width } = stateProps\n\n\t\tlet formatted_date = getFormattedDate(date)\n\t\tlet formatted_time = getFormattedTime(time)\n\n\t\tlet query_string = `lat=${lat}&lng=${lng}&date=${formatted_date}&time=${formatted_time}&height=${height}&width=${width}`\n\n\t\tmakeAPIRequest(query_string)\n\t}\n\n\tconst makeAPIRequest = async (query_string: string) => {\n\t\tlet api_endpoint = SiteConfig.apiUrl\n\t\tlet resource_url = api_endpoint + \"?\" + query_string\n\n\t\tlet server_response = await fetch(resource_url)\n\t\tconst data = await server_response.json()\n\t\tconsole.log(data)\n\n\t\tlet generated_starmap_link = api_endpoint + \"/\" + data[\"link\"]\n\n\t\tsetStateProps({ ...stateProps, starmap_link: generated_starmap_link })\n\t}\n\n\tconsole.log(stateProps)\n\n\treturn <Layout>\n\t\t<div className=\"section hero-body\">\n\t\t\t<div className=\"columns\">\n\t\t\t\t<div className=\"column is-two-thirds\">\n\t\t\t\t\t<div className=\"\">\n\t\t\t\t\t\t<img src={stateProps.starmap_link} className=\"image\" alt=\"starmap\" />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"column\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<label>Location</label>\n\t\t\t\t\t\t<div className=\"columns is-mobile\">\n\t\t\t\t\t\t\t<div className=\"column is-half\">\n\t\t\t\t\t\t\t\t<input type=\"number\" className=\"input\" placeholder=\"latitude\"\n\t\t\t\t\t\t\t\t\tonChange={(e) => setStateProps({ ...stateProps, lat: parseFloat(e.target.value) })} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"column is-half\">\n\t\t\t\t\t\t\t\t<input type=\"number\" className=\"input\" placeholder=\"longitude\"\n\t\t\t\t\t\t\t\t\tonChange={(e) => setStateProps({ ...stateProps, lng: parseFloat(e.target.value) })} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<label>Date</label>\n\t\t\t\t\t\t<input type=\"date\" className=\"input\" defaultValue={stateProps.date}\n\t\t\t\t\t\t\tonChange={(e) => setStateProps({ ...stateProps, date: handleOnChangeDate(e.target.valueAsDate) })} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<label>Time</label>\n\t\t\t\t\t\t<input type=\"time\" className=\"input\" defaultValue={stateProps.time}\n\t\t\t\t\t\t\tonChange={(e) => setStateProps({ ...stateProps, time: e.target.value })} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<label>Design Dimensions</label>\n\t\t\t\t\t\t<div className=\"columns is-mobile\">\n\t\t\t\t\t\t\t<div className=\"column is-half\">\n\t\t\t\t\t\t\t\t<input type=\"number\" className=\"input\" placeholder=\"width\"\n\t\t\t\t\t\t\t\t\tonChange={(e) => setStateProps({ ...stateProps, width: parseInt(e.target.value) })} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"column is-half\">\n\t\t\t\t\t\t\t\t<input type=\"number\" className=\"input\" placeholder=\"height\"\n\t\t\t\t\t\t\t\t\tonChange={(e) => setStateProps({ ...stateProps, height: parseInt(e.target.value) })} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div style={{ marginTop: \"0.5rem\" }}>\n\t\t\t\t\t\t<button className=\"button has-background-primary\" onClick={() => hanleClickGenerateStarmap()}>Generate Starmap</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</Layout>\n}\n\nexport default Home\n\n\nconst getDate = (date: Date | undefined) => {\n\tlet d = date || new Date()\n\tlet currDate = d.getDate()\n\tlet currMonth = d.getMonth() + 1\n\tlet currYear = d.getFullYear()\n\treturn currYear + \"-\" + ((currMonth < 10) ? '0' + currMonth : currMonth) + \"-\" + ((currDate < 10) ? '0' + currDate : currDate)\n}\n\nconst getTime = () => {\n\tlet date = new Date()\n\tlet hours = date.getHours()\n\tlet mins = date.getMinutes()\n\treturn (hours < 9 ? \"0\" + hours : hours) + \":\" + (mins < 9 ? \"0\" + mins : mins)\n}\n\n// dd.mm.yyyy\nconst getFormattedDate = (date: string) => {\n\tlet splitted_date = date.split(\"-\")\n\treturn `${splitted_date[2]}.${splitted_date[1]}.${splitted_date[0]}`\n}\n\n// hh.mm.ss\nconst getFormattedTime = (time: string) => {\n\treturn time.replace(\":\", \".\") + \".00\"\n}","import React from 'react'\n\nimport Layout from 'layout/Layout'\n\nconst About = () => {\n\n\treturn (\n\t\t<Layout>\n\t\t\t<div className=\"section hero-body\">\n\t\t\t\t<div className=\"container\" style={{ marginTop: 20 }}>\n\t\t\t\t\t<div className=\"columns is-centered\">\n\t\t\t\t\t\t<div className=\"column is-half content\">\n\t\t\t\t\t\t\t<h1>Starmap SVG Generator</h1>\t\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Layout>\n\t)\n}\n\nexport default About","import React from 'react'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport Home from 'pages/Home'\nimport About from 'pages/About'\n\nconst App = () => {\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path='/' component={Home}></Route>\n        <Route path=\"/home\" component={Home}></Route>\n        <Route path='/about' component={About}></Route>\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from 'containers/App'\nimport * as serviceWorker from 'serviceWorker'\n\nimport 'styles/main.css'\nimport 'styles/helper.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}